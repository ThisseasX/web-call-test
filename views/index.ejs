<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Web Call Experiment</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>

    <style>
      html,
      body {
        margin: 0;
        padding: 0;
        height: 100%;
        max-height: 100%;
        overflow: hidden;
        background-color: #333339;
      }

      #video-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-auto-rows: 300px;
      }

      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body>
    <div id="video-container"></div>

    <script>
      const ROOM_ID = '<%= roomId %>';
      const PEER_PORT = '<%= PEER_PORT %>';
      const PEER_HOST = '<%= PEER_HOST %>';
      const PEER_SECURE = '<%= PEER_SECURE %>';

      const peer = new Peer({
        host: PEER_HOST,
        port: PEER_PORT,
        secure: PEER_SECURE === 'true',
      });

      const socket = io('/');

      const videos = {};

      function createVideo(peerId, stream) {
        const videoContainer = document.querySelector('#video-container');
        const video = document.createElement('video');
        videoContainer.appendChild(video);

        video.srcObject = stream;
        video.onloadedmetadata = e => {
          video.play();
        };

        if (peerId !== peer.id) {
          videos[peerId] = video;
        }
      }

      function removeVideo(peerId) {
        const video = videos[peerId];

        if (video) {
          video.remove();
        }

        delete videos[peerId];
      }

      async function getStream(opts) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true,
            ...opts,
          });

          return stream;
        } catch (err) {
          console.error(err.name + ': ' + err.message);
        }
      }

      async function callPeer(peerId) {
        try {
          const stream = await getStream();
          const call = peer.call(peerId, stream);
          console.log('CALLING: ' + peerId);

          call.on('stream', stream => {
            if (!videos[peerId]) {
              createVideo(peerId, stream);
              console.log('RECEIVING STREAM FROM: ' + peerId);
            }
          });
        } catch (err) {
          console.error(err);
        }
      }

      async function init() {
        try {
          const stream = await getStream({ audio: false });
          createVideo(peer.id, stream);
        } catch (err) {
          console.error(err);
        }
      }

      init();

      peer.on('open', peerId => {
        console.log('My peer ID is: ' + peerId);
        socket.emit('new-peer', peerId, ROOM_ID);
      });

      peer.on('call', async call => {
        try {
          const stream = await getStream();
          call.answer(stream);
          console.log('RECEIVING CALL FROM: ' + call.peer);
        } catch (err) {
          console.error(err);
        }
      });

      socket.on('peer-joined', callPeer);

      socket.on('peer-left', peerId => {
        removeVideo(peerId);
      });

      socket.on('all-peers-in-room', async (peers = []) => {
        const calls = [];
        peers.filter(peerId => peerId && peerId !== peer.id).forEach(callPeer);
      });
    </script>
  </body>
</html>
