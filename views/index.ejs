<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Web Call Experiment</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>

    <style>
      html,
      body {
        margin: 0;
        padding: 0;
        height: 100%;
        max-height: 100%;
        overflow: hidden;
        background-color: #333339;
      }

      #video-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-auto-rows: 300px;
      }

      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body>
    <div id="video-container"></div>

    <script>
      const calls = {};
      const videoContainer = document.querySelector('#video-container');

      const ROOM_ID = '<%= roomId %>';
      const PEER_PORT = '<%= PEER_PORT %>';
      const PEER_HOST = '<%= PEER_HOST %>';
      const PEER_SECURE = '<%= PEER_SECURE %>';

      const socket = io('/');

      const myPeer = new Peer({
        host: PEER_HOST,
        port: PEER_PORT,
        secure: PEER_SECURE === 'true',
        debug: 2,
      });

      function log(label, msg) {
        console.log(`[${label}]` + (msg ? `: ${msg}` : ''));
      }

      function handleCallStream(call, userPeerId) {
        log('HANDLE CALL STREAM', userPeerId);
        const video = document.createElement('video');

        call.on('stream', userStream => {
          log('CALL STREAM', userPeerId);

          if (!calls[userPeerId]) {
            calls[userPeerId] = { call, video };
            log('CREATE VIDEO', userPeerId);
            addVideo(video, userStream, userPeerId);
          }
        });
      }

      function addVideo(video, stream, id, muted) {
        videoContainer.appendChild(video);

        video.muted = muted;
        video.id = id;
        video.srcObject = stream;
        video.onloadedmetadata = e => {
          video.play();
        };

        return video;
      }

      navigator.mediaDevices
        .getUserMedia({
          audio: {
            noiseSuppression: true,
            echoCancellation: true,
          },
          video: true,
        })
        .then(myStream => {
          log('INIT');

          const video = document.createElement('video');
          addVideo(video, myStream, myPeer.id, true);

          myPeer.on('call', call => {
            log('CALL IN', call.peer);
            call.answer(myStream);

            const video = document.createElement('video');

            call.on('stream', userStream => {
              log('ANSWER STREAM', call.peer);

              if (!calls[call.peer]) {
                calls[call.peer] = { call, video };
                log('CREATE VIDEO', call.peer);
                addVideo(video, userStream, call.peer);
              }
            });
          });

          socket.on('user-joined', userPeerId => {
            log('USER JOINED', userPeerId);
            log('CALL OUT', userPeerId);

            const call = myPeer.call(userPeerId, myStream);
            const video = document.createElement('video');

            call.on('stream', userStream => {
              log('CALL STREAM', userPeerId);

              if (!calls[userPeerId]) {
                calls[userPeerId] = { call, video };
                log('CREATE VIDEO', userPeerId);
                addVideo(video, userStream, userPeerId);
              }
            });
          });
        });

      socket.on('connect', () => {
        log('SOCKET CONNECT');
      });

      socket.on('user-left', userPeerId => {
        const entity = calls[userPeerId] || {};
        const { call, video } = entity;

        if (call && video) {
          call.close();
          video.remove();
          delete calls[userPeerId];
        }
      });

      myPeer.on('open', peerId => {
        log('ME', peerId);
        socket.emit('join-room', ROOM_ID, peerId);
      });
    </script>
  </body>
</html>
